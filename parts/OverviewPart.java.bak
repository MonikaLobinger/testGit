package my.example.todo.parts;

// See https://sites.google.com/site/tyroprogramming/java/rcp/nb-visual-library-in-rcp

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;

import my.example.todo.MyGraphScene;

import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.di.annotations.Execute;
import org.eclipse.e4.ui.di.Focus;
import org.eclipse.swt.SWT;
import org.eclipse.swt.awt.SWT_AWT;
import org.eclipse.swt.widgets.Composite;

import java.awt.BorderLayout;

import javax.swing.JScrollPane;

public class OverviewPart {
	@Inject
	public OverviewPart() {
	}
	
	// The re-injection only works on methods and fields which are marked with @Inject. 
	// It will not work on parameters injected into constructors and methods which are marked 
	// with @PostConstruct, as these methods are only executed once.
    @PostConstruct
	public void postConstruct(Composite parent) {
		// Prepare awt container
		Composite swtAwtComponent = new Composite(parent, SWT.EMBEDDED);
		java.awt.Frame frame = SWT_AWT.new_Frame(swtAwtComponent);
		javax.swing.JPanel panel = new javax.swing.JPanel();
		frame.add(panel);
		panel.setLayout(new BorderLayout());
		JScrollPane scrollPane = new JScrollPane();
		
		// Add the graph scene
		//MyGraphScene scene = new MyGraphScene();
		//scrollPane.setViewportView(scene.createView());
		//panel.add(scrollPane, BorderLayout.CENTER);
		//panel.add(scene.createSatelliteView(), BorderLayout.WEST);
	}	

    @Focus
    public void onFocus(IEclipseContext context) 
    {
        context.set("ueberblick", "ja");        
    }
    
}
